#!/bin/bash
#
# Creates a MontaVista Linux based container (MVL version 7 or later)
#
# This script is based on the lxc-ubuntu example script that ships with lxc.
#
# Copyright (C) 2010,2011,2012 MontaVista Software, LLC
# Modified for MontaVista Linux 7 based products
#

IN_ROOTFS_IMAGE=""

TARGET_FS=""
TROOT_DIR=""
BRSETUPFILE=""
UTSNAME=""
VLAN_MASTER_DEV=""
BRIDGE_DEV=""
BRIDGE_DEV_IP=""
BRIDGE_DEV_MASK=""
BRIDGE_MASTER_DEV="eth0"
VDEV_ID="100"
VDEV=""
IPADDR=""
NETMASK=""
GATEWAY=""
MTU="1500"
TMPDIR="/var"

################################################################################
#                    mvlinux custom configuration files
################################################################################

# Write out custom inittab
SPEED=`stty speed`
write_mvlinux_inittab() {
    cat <<EOF > "${ROOTFS}"/etc/inittab || exit_failure
id:3:initdefault:
si::sysinit:/etc/init.d/rcS
l0:0:wait:/etc/init.d/rc 0
l1:1:wait:/etc/init.d/rc 1
l2:2:wait:/etc/init.d/rc 2
l3:3:wait:/etc/init.d/rc 3
l4:4:wait:/etc/init.d/rc 4
l5:5:wait:/etc/init.d/rc 5
l6:6:wait:/etc/init.d/rc 6
# Normally not reached, but fallthrough in case of emergency.
z6:6:respawn:/sbin/sulogin
t1:2345:respawn:/sbin/getty ${SPEED} tty1 linux
t2:2345:respawn:/sbin/getty ${SPEED} tty2 linux
t3:2345:respawn:/sbin/getty ${SPEED} tty3 linux
t4:2345:respawn:/sbin/getty ${SPEED} tty4 linux
EOF
    # set permissions
    chmod 644 "${ROOTFS}"/etc/inittab
}

# Write out custom rcS
write_mvlinux_rcS() {
    # start some services by hand
    cat <<EOF >> "${ROOTFS}"/etc/init.d/rcS || exit_failure
# Misc tasks, services
syslogd
EOF

    # set variable to distinguish rootfs of container
    [ -e "${ROOTFS}"/etc/default/rcS ] && \
    echo "IN_CONTAINER_ENV=yes" >> "${ROOTFS}"/etc/default/rcS
}

# Write out a custom fstab
write_mvlinux_fstab() {

    # Create mount points
    mkdir -p -m 755  "${ROOTFS}"/dev/pts
    mkdir -p -m 1777 "${ROOTFS}"/dev/shm

    cat <<EOF > "${ROOTFS}"/etc/fstab || exit_failure
none   /proc         proc   defaults         0 0
none   /dev/shm      tmpfs  defaults         0 0
none   /sys          sysfs  defaults         0 0
devpts /dev/pts      devpts mode=0620,gid=5  0 0
EOF

    # set permissions
    chmod 644 "${ROOTFS}"/etc/fstab || return 1

    # write sample fstab
    cat <<EOF > "${ROOTFS_BASE}"/fstab || exit_failure
#
# These are the filesystems that are always mounted on boot
# See fstab(5).
#
# <file system> <mount point>             <type>     <options>             <dump> <pass>
EOF
}

# Write out network config (dhcp)
write_mvlinux_network() {
    cat <<EOF > "${ROOTFS}"/etc/network/interfaces || exit_failure
# /etc/network/interfaces -- configuration file for ifup(8), ifdown(8)
 
# The loopback interface
auto lo
iface lo inet loopback

auto ${VDEV}
EOF
    if [ -z "${IPADDR}" ]; then
	cat <<EOF >> "${ROOTFS}"/etc/network/interfaces || exit_failure
iface $VDEV inet dhcp
EOF
    else
	cat <<EOF >> "${ROOTFS}"/etc/network/interfaces || exit_failure
iface $VDEV inet static
    address ${IPADDR}
EOF
    fi
    if [ -z "${NETMASK}" -a -n "${IPADDR}" ]; then
        NETMASK=255.255.255.0
    fi
    if [ -n "${NETMASK}" ]; then
	cat <<EOF >> "${ROOTFS}"/etc/network/interfaces || exit_failure
    netmask ${NETMASK}
EOF
    fi
    if [ ! -z "${GATEWAY}" ]; then
        cat <<EOF >> "${ROOTFS}"/etc/network/interfaces || exit_failure
      up ip route add default via ${GATEWAY} dev ${VDEV}
EOF
    fi

    # create state files
    rm -rf "${ROOTFS}"/var/run
    mkdir -p "${ROOTFS}"/var/run/network
    touch "${ROOTFS}"/var/run/network/ifstate

    # install default resolv.conf
    rm -f "${ROOTFS}"/etc/resolv.conf
    cp -a /etc/resolv.conf "${ROOTFS}"/etc/resolv.conf

    # we retain the default udhcpc (dhcp client) configuration
    # /etc/udhcpc.d/50default
}

# Set the hostname for the container
write_mvlinux_hostname() {
    cat <<EOF > "${ROOTFS}"/etc/hostname || exit_failure
${UTSNAME}
EOF
    cat <<EOF > "${ROOTFS}"/etc/hosts || exit_failure
127.0.0.1   ${UTSNAME} localhost

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF
}

# Writes a custom ssh config that allows root logins
write_mvlinux_sshd_config() {
    cat <<EOF > "${ROOTFS}"/etc/ssh/sshd_config || exit_failure
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
UsePrivilegeSeparation yes
KeyRegenerationInterval 3600
ServerKeyBits 768
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords yes
ChallengeResponseAuthentication no
EOF

    # Create state file
    mkdir -p "${ROOTFS}"/var/run/sshd

    # Make sure the user sshd exists
    grep "^sshd:" "${ROOTFS}"/etc/passwd >/dev/null
    if [ ! -z $? ]; then
        cat << EOF >> "${ROOTFS}"/etc/passwd || exit_failure
sshd:x:74:74:Privilege-separated SSH:/var/run/sshd:/sbin/nologin
EOF
    fi
}

# reconfigure_mvlinux_packages() {
# add any package reconfiguration code here -- this step most
# likely will not apply to a cross environment
# }

disable_service() {
    bn=$1
    # echo " Disabling initscript $bn ..."
    for i in 0 1 2 3 4 5 6 7 8 9 S; do
            dn="${ROOTFS}/etc/rc${i}.d"
            if [ ! -d $dn ]; then
                    continue;
            fi
            for f in ${dn}/[SK]??${bn}; do
                    if [ -L $f ]; then
                            # echo "  $f"
                            rm -f $f
                    fi
            done
    done

    if [ "$2" = "1" ]; then
        rm -f "${ROOTFS}"/etc/init.d/$1
    fi

    return 0
}

# Disables services unsuitable for a container
disable_mvlinux_services() {

    # Remove any starting of udevd as it will
    # not work properly inside a container.
    disable_service udev 1
    rm -f "${ROOTFS}"/etc/init.d/udev-cache
    rm -rf "${ROOTFS}"/etc/udev

    # Remove any clock setting/saving from your
    # runlevels (they will likely fail anyways)
    rm -f "${ROOTFS}"/etc/timestamp 2> /dev/null > /dev/null
    disable_service hwclock.sh 1

    # Remove other services that may not work well
    # inside the container
    disable_service devices 1
    disable_service acpid 1
    disable_service checkroot 1
    disable_service dbus-1 0
    disable_service devpts.sh 1
    disable_service modutils.sh 1
    disable_service mountnfs.sh 1
    disable_service ramdisk 1
    disable_service run-postinsts 0
    disable_service save-rtc.sh 1
    disable_service sysfs 0
    rm -f "${ROOTFS}"/etc/init.d/sysfs.sh
    disable_service umountfs 1
    disable_service umountnfs.sh 1
}


################################################################################
#                        lxc configuration file
################################################################################


##############################################################################
# mask_to_prefix	Converts netmask to prefix length
# 			eg. 255.255.192.0 -> 18
# $1 ... netmask
mask_to_prefix () {
    _LEN=0; _msk="$1"
    for _tmp in 1 2 3 4; do
        _fld=${_msk%%.*}
	_msk=${_msk#*.}

	while [ ${_fld} -ne 0 ]; do
	    _fld=$(((_fld * 2) & 255))
	    _LEN=$((_LEN + 1))
	done
    done

    echo ${_LEN}
}

write_lxc_configuration() {
    mkdir -p `dirname "${CONFFILE}"`

    cat <<EOF > "${CONFFILE}"
lxc.uts.name = ${UTSNAME}
lxc.tty.max = 4
lxc.pty.max = 1024
lxc.rootfs.path = ${TROOTFS}
EOF

    # Network configuration
    if [ -n "${VLAN_MASTER_DEV}" ]; then
	cat <<EOF >> "${CONFFILE}"

# Container with network virtualized using the vlan device driver
lxc.net.0.type = vlan
lxc.net.0.vlan.id = ${VDEV_ID}
lxc.network.0.flags = up
# physical link on the host
lxc.net.0.link = ${VLAN_MASTER_DEV}
# link name on the guest
lxc.net.0.name = ${VDEV}
lxc.net.0.mtu = ${MTU}
EOF
    else
	cat <<EOF >> "${CONFFILE}"

# Container with network virtualized using the vlan device driver
lxc.net.0.type = veth
lxc.net.0.flags = up
# Bridge net on the host
lxc.net.0.link = ${BRIDGE_DEV}
# link name on the guest
lxc.net.0.name = ${VDEV}
lxc.net.0.mtu = ${MTU}
EOF
    fi

    # Optional network configuration

    # Get IPv4 prefix length
    if [ ! -z "${NETMASK}" ]; then
        # Prefix len, use it as is
        if [ -n "$(echo ${NETMASK} | grep -E '^[[:digit:]]{1,2}$')" ]; then
            PREFIX_LEN=${NETMASK}
        # netmask, convert it to prefix length for VPN
        elif [ -n "$(echo ${NETMASK} | grep -E '^[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}\.[[:digit:]]{1,3}$')" ]; then
            PREFIX_LEN=$(mask_to_prefix ${NETMASK})
        else
            echo "malformed netmask: ${NETMASK}."
            exit 1
        fi
    fi

    if [ ! -z "${IPADDR}" ]; then
    cat <<EOF >> "${CONFFILE}"
lxc.net.0.ipv4.address = ${IPADDR}/${PREFIX_LEN}
EOF
    fi

    # Alternate fstab
    cat <<EOF >> "${CONFFILE}"

# Alternate fstab
lxc.mount.fstab = ${TROOTFS_BASE}/fstab
EOF
}

write_brsetup() {
    cat <<EOF >>"${BRSETUPFILE}" || exit_failure
BRNET=${BRIDGE_DEV}
ETH=${BRIDGE_MASTER_DEV}
IP=${BRIDGE_DEV_IP}
MASK=${BRIDGE_DEV_MASK}
if ! (brctl show | grep "^\$BRNET\s" >/dev/null); then
	if [ -z "\$IP" ]; then
		IPMASK=\`ifconfig \$ETH | grep 'inet' | sed -e 's/^.*inet//' -e 's/ *Bcast:.*Mask:/ /'\`
		if [ -z "\$IPMASK" ]; then
			echo "Unable to get configuration for \$ETH"
			exit 1
		fi
		IP=\`echo \$IPMASK | cut -d ' ' -f 1\`
		MASK=\`echo \$IPMASK | cut -d ' ' -f 2\`
	fi
	if [ -n "\$MASK" ]; then
		MASK="netmask \$MASK"
	fi
	# Set up the network bridge.
	brctl addbr \$BRNET
	# Disable forwarding delay on \$BRNET
	brctl setfd \$BRNET 0
	# Assign the IP address of ETH to BRNET and activate it.
	ifconfig \$BRNET \$IP \$MASK promisc up
	if [ -n "\$ETH" ]; then
		# Add the physical interface eth0 to the bridge.
		brctl addif \$BRNET \$ETH
		# Remove the IP address from ETH.
		ifconfig \$ETH 0.0.0.0
	fi
fi
EOF
    chmod +x "${BRSETUPFILE}"
}

exit_failure() {
    echo " failed." 1>&2
    echo "Cleaning up .. " 1>&2
    rm -rf "${ROOTFS_BASE}" 2> /dev/null > /dev/null
    echo "done." 1>&2
    exit 1
}

#
# Mount or untar into the given directory
# The first argument is the source file to mount or untar.  The second
# argument is the place to untar it into.  If it is a mount, then it will
# be mounted in a temporary directory.  The mount or untar location is
# printed by the script.  The script returns true (0) if it mounted, 1 on
# failure, and 2 if it untar-ed.
#
get_fs() {
    local inplace=false
    if [ "$1" == "-i" ]; then
	inplace=true
	shift
    fi
    local filename="$1"
    local untar_loc="$2"
    local mounted=0
    local comp=""

    # Create base rootfs from the mvlinux image
    if [ ! -e "${filename}" ]; then
        echo "Image '${filename}' not found" 1>&2
        exit_failure
    fi

    case "${filename}" in
    *.ext?.gz)
	mounted=1
	comp="gzip"
	;;
    *.ext?.bz)
	mounted=1
	comp="bzip2"
	;;
    *.ext?)
	mounted=1
	;;
    *.tar.gz)
	comp="gzip"
	;;
    *.tar.bz)
	comp="bzip2"
	;;
    *.tar)
	;;
    *)
	echo -n "Unknown file type for ${filename}, must " 1>&2
	echo "be *.[ext<n>|tar][.gz|.bz]" 1>&2
	exit_failure
    esac

    if [ "${mounted}" = "1" ]; then
	local fname="${filename}"
	local mntloc=""

	case ${comp} in
	gzip|bzip2)
	    if ${inplace}; then
		if ! ${comp} -d "${filename}"; then
		    echo "Unable to decompress ${filename}" 1>&2
		    exit_failure
		fi
		fname=`echo "${filename}" | sed 's/[.][^.]*$//'`
	    else
		fname=`mktemp -p ${TMPDIR}`
		if ! ${comp} -cd "${filename}" >"${fname}"; then
		    echo "Unable to decompress ${filename}" 1>&2
		    rm -f "${fname}"
		    exit_failure
		fi
	    fi
	    ;;
	esac

	mntloc=`mktemp -d -p ${TMPDIR}`
	mkdir -p "${mntloc}"
	ro=,ro
	if ${inplace}; then
	    ro=
	fi
	if ! mount -o loop${ro} "${fname}" "${mntloc}"; then
	    echo "Unable to mount ${fname} (from ${filename})" 1>&2
	    rm -rf "${mntloc}"
	    if [ -n "${comp}" ]; then
		if ${inplace}; then
		    ${comp} "${fname}"
		else
		    rm "${fname}"
		fi
	    fi
	    exit_failure
	fi
	if [ -n "${comp}" ]; then
	    # The mount will still work, this way we don't have to delete
	    # this file later.
	    if ! ${inplace}; then
		rm "${fname}"
	    fi
	fi
	echo "${mntloc}"
	return 0
    else
	if [ -n "${untar_loc}" ]; then
	    untar_loc=`mktemp -d -p ${TMPDIR}`
	    mkdir -p "${untar_loc}"
	fi
	if [ -n "${comp}" ]; then
	    comp="--${comp}"
	fi
	if ! tar -x "${comp}" --file="${filename}" -C "${untar_loc}"; then
	    echo "Unable to untar the filesystem" 1>&2
	    exit_failure
	fi
	echo "${untar_loc}"
	return 2
    fi
}

restore_fs() {
    local inplace=false
    if [ "$1" == "-i" ]; then
	inplace=true
	shift
    fi
    local filename="$1"
    local untar_loc="$2"
    local mounted="$3"

    case "${filename}" in
    *.ext?.gz)
	comp="gzip"
	;;
    *.ext?.bz)
	comp="bzip2"
	;;
    *.tar.gz)
	comp="gzip"
	;;
    *.tar.bz)
	comp="bzip2"
	;;
    esac

    if [ "${mounted}" == '0' ]; then
	umount "${untar_loc}"
	if $inplace; then
	    if [ -n "${comp}" ]; then
		local fname=`echo "${filename}" | sed 's/[.][^.]*$//'`
		${comp} "${fname}"
	    fi
	fi
    else
	if [ -n "${comp}" ]; then
	    comp="--${comp}"
	fi
	if ! tar -c "${comp}" --file="${filename}" -C "${untar_loc}"; then
	    echo "Unable to untar the filesystem" 1>&2
	    exit_failure
	fi
	rm -rf ${untar_loc}
    fi
}

#
# Install the rootfs from a tar or ext2 archive
#
install_mvlinux() {
    local mntloc=""

    # Create base rootfs from the mvlinux image
    echo -n "Getting filesystem from ${1} into ${ROOTFS}..."

    if mntloc=`get_fs "$1" "${ROOTFS}"`; then
	cp -a "${mntloc}"/* "${ROOTFS}"
	umount "${mntloc}"
        rmdir "${mntloc}"
    fi

    echo "done."
}

#
# Install from the current root filesystem, mounting read-only the
# things that shouldn't need to change.
#
copy_mvlinux() {
    MDIRS="bin lib lib32 lib64 lib32-fp lib64-fp libilp32 sbin usr"
    pushd "${ROOTFS}" >/dev/null
    cp -a --one-file-system "${ROOT_DIR}"/dev .
    cp -a "${ROOT_DIR}"/etc .
    mkdir mnt
    mkdir proc
    mkdir sys
    mkdir tmp
    chmod 777 tmp
    chmod +t tmp
    mkdir home
    mkdir home/root
    cp -a --one-file-system "${ROOT_DIR}"/var .
    for i in ${MDIRS}; do
	if [ -d "${ROOT_DIR}/$i" ]; then
	    mkdir -p "$i"
	    cat <<EOF >>"${CONFFILE}"
lxc.mount.entry = /$i ${TROOTFS}/$i none ro,bind 0 0
EOF
	fi
    done
    popd >/dev/null
}

cleanup_container() {
    # Make sure this doesn't exist.  If it does and it's not what lxc-start
    # expects, then it will do some strange mount that doesn't work.
    rm -f "${ROOTFS}"/dev/ptmx
}

create_container() {

    rm -rf "${ROOTFS_BASE}"
    mkdir -p "${ROOTFS}"

    # Create config
    write_lxc_configuration

    if [ -n "${BRIDGE_DEV}" ]; then
	write_brsetup
    fi

    # Create rootfs
    if [ -n "${IN_ROOTFS_IMAGE}" ]; then
	install_mvlinux "${IN_ROOTFS_IMAGE}"
    else
	copy_mvlinux
    fi

    echo -n "Configuring rootfs .. "
    write_mvlinux_hostname
    write_mvlinux_rcS
    write_mvlinux_inittab
    write_mvlinux_fstab
    write_mvlinux_network
    write_mvlinux_sshd_config
    ## reconfigure_mvlinux_packages
    echo "done." 

    ONTARGET=''
    if [ -n "${TARGET_FS}" ]; then
	ONTARGET=' on the target system'
    fi
    echo -n "Making services container aware .. "
    disable_mvlinux_services
    cleanup_container
    echo "done." 

    echo "Container '${NAME}' created:"
    echo "    config: ${TCONFFILE}"
    echo "    rootfs: ${TROOTFS}"
    echo "You can launch the container${ONTARGET} with:"
    if [ -n "${BRIDGE_DEV}" ]; then
	echo "    # Set up the bridge device"
	echo "    ${TBRSETUPFILE}"
    fi
    echo "    # Create container using the config"
    echo "    lxc-create -n ${NAME} -f ${TCONFFILE} -t /bin/true"
    echo "    # Launch the container"
    echo "    lxc-start -n ${NAME}"
}

usage() {
    echo "Usage: $(readlink -f $0)"
    echo "                         -n <CONTAINER_NAME>"
    echo "                       [ -p <PATH_TO_MVLINUX_IMAGE.ext2.gz> ]"
    echo "                       [ -w <ROOT_DIR> ]"
    echo "                       [ -u <CONTAINER_HOSTNAME> ]"
    echo "                       [ -i <CONTAINER_IPADDR> ]"
    echo "                       [ -m <CONTAINER_NETMASK/PREFIX_LEN> ]"
    echo "                       [ -g <CONTAINER_DEFAULT_GATEWAY> ]"
    echo "                       [ -v <VLAN_ID_or_VETH_ID> ]"
    echo "                       [ -b <BRIDGE_DEV> ]"
    echo "                       [ -e <BRIDGE_MASTER_DEV> ]"
    echo "                       [ -c <BRIDGE_IP_ADDRESS> ]"
    echo "                       [ -f <BRIDGE_IP_NETMASK> ]"
    echo "                       [ -d <CONTAINER_VLAN_MASTER_DEV> ]"
    echo "                       [ -t <TARGET_FILESYSTEM_OR_TARBALL> ]"
    exit 0
}

help() {
    cat <<EOF

This script helps in creation of system container rootfs with
MontaVista Linux 7 based file system as the base.  Build your
MontaVista Linux 7/CGE7 based file system with the command
'bitbake small-image' or 'bitbake default-image' to include
the packages you need installed in the system container and
point 'lxc-mvlinux-cross' to the filesystem image to create a
rootfs and container configuration.

You can specify additional packages required, in your project's
local.conf with IMAGE_INSTALL:append.  Additional customizations
to the rootfs will need to be performed manually.

A container config file <CONTAINER_NAME>.conf and a compressed
rootfs tarball <CONTAINER_NAME>.tar.gz are created.  You will
need to extract the rootfs image on your target to:

  /src/lxc/<CONTAINER_NAME>/rootfs

before launching the container with:

  lxc-start -f <CONTAINER_NAME>.conf -n <CONTAINER_NAME>

This script creates a bridge network interface 'veth100' inside
the container and creates a script in /src/lxc/<CONTAINER_NAME/brsetup
that sets up the bridge device (on the host).  The number of the veth
device can be modified with '-v' and the name of the bridge device
(which defaults to 'br0') can be specified with the '-b' option.
By default eth0 is used as the master device for the bridge in brsetup,
this can be changed with the '-e' option.

If you specify -d <dev>, instead of a bricge, a VLAN ethernet interface
is created..  It creates  network interface 'vlan100' inside
the container with default VLAN ID 100 and master device specified by -d
(on the host).  The VLAND ID can be changed with the '-v' command line
option.

EOF

usage
}


# Main program

if [ $# = 0 ]; then
    usage
fi

case "$1" in
    -h|-help|--help) help;;
esac

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

NAME=""
while getopts "n:p:u:i:m:g:v:d:b:w:c:f:e:t:" flag
do
    case $flag in
        n) NAME="$OPTARG" ;;
        p) IN_ROOTFS_IMAGE="$OPTARG" ;;
        u) UTSNAME="$OPTARG" ;;
        i) IPADDR="$OPTARG" ;;
        m) NETMASK="$OPTARG" ;;
        g) GATEWAY="$OPTARG" ;;
        d) VLAN_MASTER_DEV="$OPTARG" ;;
	b) BRIDGE_DEV="$OPTARG" ;;
	e) BRIDGE_MASTER_DEV="$OPTARG" ;;
        c) BRIDGE_DEV_IP="$OPTARG" ;;
        f) BRIDGE_DEV_MASK="$OPTARG" ;;
        v) VDEV_ID="$OPTARG" ;;
        w) TROOT_DIR="$OPTARG" ;;
	t) TARGET_FS="$OPTARG" ;;
        *)
            echo "Unknown argument: $flag"
            exit 1
            ;;
    esac
done

if [ -z "$NAME" ]; then
    echo "missing container name, use -n option"
    exit 1
fi

if [ -z "$UTSNAME" ]; then
    UTSNAME=$NAME
fi

if [ -n "$BRIDGE_DEV" -a -n "$VLAN_MASTER_DEV" ]; then
    echo "cannot have both a bridge and vlan device"
    exit 1
fi

if [ -z "$BRIDGE_DEV" -a -z "$VLAN_MASTER_DEV" ]; then
    BRIDGE_DEV="br0"
fi

if [ -n "$BRIDGE_DEV" ]; then
    VDEV="veth${VDEV_ID}"
    if [ -z "$BRIDGE_MASTER_DEV" -a -z "$BRIDGE_DEV_IP" ]; then
        echo "If you set -e to a null string, you must use -c to set the"
        echo "bridge IP address"
    fi
else
   VDEV="vlan${VDEV_ID}"
fi

if [ -n "${TARGET_FS}" ]; then
    BASEDIR=`get_fs -i "${TARGET_FS}" ""`
    MOUNTED=$?
    if [ "${MOUNTED}" == '1' ]; then
	exit 1
    fi
fi

ROOT_DIR="${BASEDIR}${TROOT_DIR}"
TROOTFS_BASE="${TROOT_DIR}/srv/lxc/${NAME}"
ROOTFS_BASE="${BASEDIR}${TROOTFS_BASE}"
TCONFFILE="${TROOTDIR}/etc/lxc/${NAME}/lxc-$NAME.conf"
CONFFILE="${BASEDIR}${TCONFFILE}"
TBRSETUPFILE="${TROOTFS_BASE}/brsetup"
BRSETUPFILE="${BASEDIR}${TBRSETUPFILE}"
TROOTFS="${TROOTFS_BASE}/rootfs"
ROOTFS="${BASEDIR}${TROOTFS}"

# Sanity check
if [ "${ROOTFS}" = '/' ]; then
    echo "ERROR: The container file system is rooted at '/' on the host."
    echo "This should not happen."
    exit 1
fi

create_container

if [ -n "${TARGET_FS}" ]; then
    restore_fs -i "${TARGET_FS}" "${BASEDIR}" ${MOUNTED}
fi
